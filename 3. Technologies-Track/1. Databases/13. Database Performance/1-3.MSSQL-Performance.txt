--1. Create a table in SQL Server with 10 000 000 log entries (date + text). 
--Search in the table by date range. Check the speed (without caching).
CREATE DATABASE PerformanceDb

USE PerformanceDb

CREATE TABLE Posts
(
	PostId INT IDENTITY,
		CONSTRAINT PK_Posts PRIMARY KEY(PostId),
	PostDate DATE NOT NULL,
	PostText NVARCHAR(255) NOT NULL,
)

CHECKPOINT; DBCC DROPCLEANBUFFERS; -- Empty the SQL Server cache

SELECT * 
FROM Posts 
WHERE PostDate BETWEEN '2002-1-1' AND '2002-5-5' 

--2. Add an index to speed-up the search by date. Test the search speed (after cleaning the cache).
CREATE INDEX IX_Posts_PostDate
	ON Posts(PostDate)
GO

CHECKPOINT; DBCC DROPCLEANBUFFERS; -- Empty the SQL Server cache

SELECT * 
FROM Posts 
WHERE PostDate BETWEEN '2002-1-1' AND '2002-5-5' 

--3. Add a full text index for the text column. Try to search with
--and without the full-text index and compare the speed.

CREATE FULLTEXT CATALOG PostsFullTextCatalogForPostsText

CREATE FULLTEXT INDEX ON Posts(PostText)
KEY INDEX PK_Posts
ON PostsFullTextCatalogForPostsText
WITH CHANGE_TRACKING AUTO

CHECKPOINT; DBCC DROPCLEANBUFFERS; --Empty the SQL Server cache

SELECT * FROM Posts 
WHERE PostText LIKE ('%abds')

CHECKPOINT; DBCC DROPCLEANBUFFERS; --Empty the SQL Server cache

SELECT * FROM Posts
WHERE CONTAINS(PostText,'abds')

SELECT * FROM Posts
WHERE PostText = 'dads';

SELECT COUNT(*) FROM Posts;